#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceLibrary.DbConnection
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="JobPortal")]
	public partial class JobPortalDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountState(AccountState instance);
    partial void UpdateAccountState(AccountState instance);
    partial void DeleteAccountState(AccountState instance);
    partial void InsertAddressTable(AddressTable instance);
    partial void UpdateAddressTable(AddressTable instance);
    partial void DeleteAddressTable(AddressTable instance);
    partial void InsertAdvertisement(Advertisement instance);
    partial void UpdateAdvertisement(Advertisement instance);
    partial void DeleteAdvertisement(Advertisement instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertDates(Dates instance);
    partial void UpdateDates(Dates instance);
    partial void DeleteDates(Dates instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertLogging(Logging instance);
    partial void UpdateLogging(Logging instance);
    partial void DeleteLogging(Logging instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertOrderTable(OrderTable instance);
    partial void UpdateOrderTable(OrderTable instance);
    partial void DeleteOrderTable(OrderTable instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertPaymentType(PaymentType instance);
    partial void UpdatePaymentType(PaymentType instance);
    partial void DeletePaymentType(PaymentType instance);
    partial void InsertRate(Rate instance);
    partial void UpdateRate(Rate instance);
    partial void DeleteRate(Rate instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertSaleline(Saleline instance);
    partial void UpdateSaleline(Saleline instance);
    partial void DeleteSaleline(Saleline instance);
    partial void InsertServiceTable(ServiceTable instance);
    partial void UpdateServiceTable(ServiceTable instance);
    partial void DeleteServiceTable(ServiceTable instance);
    partial void InsertUserTable(UserTable instance);
    partial void UpdateUserTable(UserTable instance);
    partial void DeleteUserTable(UserTable instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    #endregion
		
		public JobPortalDatabaseDataContext() : 
				base(global::ServiceLibrary.Properties.Settings.Default.JobPortalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JobPortalDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JobPortalDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JobPortalDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JobPortalDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkingArea> WorkingArea
		{
			get
			{
				return this.GetTable<WorkingArea>();
			}
		}
		
		public System.Data.Linq.Table<AccountState> AccountState
		{
			get
			{
				return this.GetTable<AccountState>();
			}
		}
		
		public System.Data.Linq.Table<AddressTable> AddressTable
		{
			get
			{
				return this.GetTable<AddressTable>();
			}
		}
		
		public System.Data.Linq.Table<Advertisement> Advertisement
		{
			get
			{
				return this.GetTable<Advertisement>();
			}
		}
		
		public System.Data.Linq.Table<AvailableDates> AvailableDates
		{
			get
			{
				return this.GetTable<AvailableDates>();
			}
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customer
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Dates> Dates
		{
			get
			{
				return this.GetTable<Dates>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Gender
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<Logging> Logging
		{
			get
			{
				return this.GetTable<Logging>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<OrderTable> OrderTable
		{
			get
			{
				return this.GetTable<OrderTable>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payment
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<PaymentType> PaymentType
		{
			get
			{
				return this.GetTable<PaymentType>();
			}
		}
		
		public System.Data.Linq.Table<Rate> Rate
		{
			get
			{
				return this.GetTable<Rate>();
			}
		}
		
		public System.Data.Linq.Table<Review> Review
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<Saleline> Saleline
		{
			get
			{
				return this.GetTable<Saleline>();
			}
		}
		
		public System.Data.Linq.Table<ServiceTable> ServiceTable
		{
			get
			{
				return this.GetTable<ServiceTable>();
			}
		}
		
		public System.Data.Linq.Table<UserTable> UserTable
		{
			get
			{
				return this.GetTable<UserTable>();
			}
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingArea")]
	public partial class WorkingArea
	{
		
		private string _Employee_Phone;
		
		private string _City;
		
		public WorkingArea()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_Phone", DbType="VarChar(20)")]
		public string Employee_Phone
		{
			get
			{
				return this._Employee_Phone;
			}
			set
			{
				if ((this._Employee_Phone != value))
				{
					this._Employee_Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountState")]
	public partial class AccountState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Account_state;
		
		private EntitySet<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccount_stateChanging(string value);
    partial void OnAccount_stateChanged();
    #endregion
		
		public AccountState()
		{
			this._Account = new EntitySet<Account>(new Action<Account>(this.attach_Account), new Action<Account>(this.detach_Account));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_state", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Account_state
		{
			get
			{
				return this._Account_state;
			}
			set
			{
				if ((this._Account_state != value))
				{
					this.OnAccount_stateChanging(value);
					this.SendPropertyChanging();
					this._Account_state = value;
					this.SendPropertyChanged("Account_state");
					this.OnAccount_stateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountState_Account", Storage="_Account", ThisKey="ID", OtherKey="AccountState_ID")]
		public EntitySet<Account> Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				this._Account.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountState = this;
		}
		
		private void detach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountState = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressTable")]
	public partial class AddressTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _City;
		
		private string _Postcode;
		
		private string _Region;
		
		private EntitySet<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    #endregion
		
		public AddressTable()
		{
			this._UserTable = new EntitySet<UserTable>(new Action<UserTable>(this.attach_UserTable), new Action<UserTable>(this.detach_UserTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postcode", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Postcode
		{
			get
			{
				return this._Postcode;
			}
			set
			{
				if ((this._Postcode != value))
				{
					this.OnPostcodeChanging(value);
					this.SendPropertyChanging();
					this._Postcode = value;
					this.SendPropertyChanged("Postcode");
					this.OnPostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressTable_UserTable", Storage="_UserTable", ThisKey="City", OtherKey="City")]
		public EntitySet<UserTable> UserTable
		{
			get
			{
				return this._UserTable;
			}
			set
			{
				this._UserTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTable(UserTable entity)
		{
			this.SendPropertyChanging();
			entity.AddressTable = this;
		}
		
		private void detach_UserTable(UserTable entity)
		{
			this.SendPropertyChanging();
			entity.AddressTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Advertisement")]
	public partial class Advertisement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _RatePerHour;
		
		private string _Description;
		
		private System.Nullable<int> _Review_ID;
		
		private int _Service_ID;
		
		private string _Employee_Phone;
		
		private string _Title;
		
		private EntitySet<Saleline> _Saleline;
		
		private EntityRef<Review> _Review;
		
		private EntityRef<ServiceTable> _ServiceTable;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRatePerHourChanging(decimal value);
    partial void OnRatePerHourChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReview_IDChanging(System.Nullable<int> value);
    partial void OnReview_IDChanged();
    partial void OnService_IDChanging(int value);
    partial void OnService_IDChanged();
    partial void OnEmployee_PhoneChanging(string value);
    partial void OnEmployee_PhoneChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Advertisement()
		{
			this._Saleline = new EntitySet<Saleline>(new Action<Saleline>(this.attach_Saleline), new Action<Saleline>(this.detach_Saleline));
			this._Review = default(EntityRef<Review>);
			this._ServiceTable = default(EntityRef<ServiceTable>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatePerHour", DbType="Money NOT NULL")]
		public decimal RatePerHour
		{
			get
			{
				return this._RatePerHour;
			}
			set
			{
				if ((this._RatePerHour != value))
				{
					this.OnRatePerHourChanging(value);
					this.SendPropertyChanging();
					this._RatePerHour = value;
					this.SendPropertyChanged("RatePerHour");
					this.OnRatePerHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review_ID", DbType="Int")]
		public System.Nullable<int> Review_ID
		{
			get
			{
				return this._Review_ID;
			}
			set
			{
				if ((this._Review_ID != value))
				{
					if (this._Review.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReview_IDChanging(value);
					this.SendPropertyChanging();
					this._Review_ID = value;
					this.SendPropertyChanged("Review_ID");
					this.OnReview_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_ID", DbType="Int NOT NULL")]
		public int Service_ID
		{
			get
			{
				return this._Service_ID;
			}
			set
			{
				if ((this._Service_ID != value))
				{
					if (this._ServiceTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnService_IDChanging(value);
					this.SendPropertyChanging();
					this._Service_ID = value;
					this.SendPropertyChanged("Service_ID");
					this.OnService_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Employee_Phone
		{
			get
			{
				return this._Employee_Phone;
			}
			set
			{
				if ((this._Employee_Phone != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployee_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Employee_Phone = value;
					this.SendPropertyChanged("Employee_Phone");
					this.OnEmployee_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(30)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Advertisement_Saleline", Storage="_Saleline", ThisKey="ID", OtherKey="Advertisement_ID")]
		public EntitySet<Saleline> Saleline
		{
			get
			{
				return this._Saleline;
			}
			set
			{
				this._Saleline.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_Advertisement", Storage="_Review", ThisKey="Review_ID", OtherKey="ID", IsForeignKey=true)]
		public Review Review
		{
			get
			{
				return this._Review.Entity;
			}
			set
			{
				Review previousValue = this._Review.Entity;
				if (((previousValue != value) 
							|| (this._Review.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Review.Entity = null;
						previousValue.Advertisement.Remove(this);
					}
					this._Review.Entity = value;
					if ((value != null))
					{
						value.Advertisement.Add(this);
						this._Review_ID = value.ID;
					}
					else
					{
						this._Review_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Review");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceTable_Advertisement", Storage="_ServiceTable", ThisKey="Service_ID", OtherKey="ID", IsForeignKey=true)]
		public ServiceTable ServiceTable
		{
			get
			{
				return this._ServiceTable.Entity;
			}
			set
			{
				ServiceTable previousValue = this._ServiceTable.Entity;
				if (((previousValue != value) 
							|| (this._ServiceTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceTable.Entity = null;
						previousValue.Advertisement.Remove(this);
					}
					this._ServiceTable.Entity = value;
					if ((value != null))
					{
						value.Advertisement.Add(this);
						this._Service_ID = value.ID;
					}
					else
					{
						this._Service_ID = default(int);
					}
					this.SendPropertyChanged("ServiceTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_Advertisement", Storage="_UserTable", ThisKey="Employee_Phone", OtherKey="PhoneNumber", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.Advertisement.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.Advertisement.Add(this);
						this._Employee_Phone = value.PhoneNumber;
					}
					else
					{
						this._Employee_Phone = default(string);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Saleline(Saleline entity)
		{
			this.SendPropertyChanging();
			entity.Advertisement = this;
		}
		
		private void detach_Saleline(Saleline entity)
		{
			this.SendPropertyChanging();
			entity.Advertisement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AvailableDates")]
	public partial class AvailableDates
	{
		
		private int _ID;
		
		private System.Nullable<int> _Saleline_ID;
		
		private int _Advertisement_ID;
		
		public AvailableDates()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Saleline_ID", DbType="Int")]
		public System.Nullable<int> Saleline_ID
		{
			get
			{
				return this._Saleline_ID;
			}
			set
			{
				if ((this._Saleline_ID != value))
				{
					this._Saleline_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Advertisement_ID", DbType="Int NOT NULL")]
		public int Advertisement_ID
		{
			get
			{
				return this._Advertisement_ID;
			}
			set
			{
				if ((this._Advertisement_ID != value))
				{
					this._Advertisement_ID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ServiceTable> _ServiceTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Category()
		{
			this._ServiceTable = new EntitySet<ServiceTable>(new Action<ServiceTable>(this.attach_ServiceTable), new Action<ServiceTable>(this.detach_ServiceTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ServiceTable", Storage="_ServiceTable", ThisKey="ID", OtherKey="Category_ID")]
		public EntitySet<ServiceTable> ServiceTable
		{
			get
			{
				return this._ServiceTable;
			}
			set
			{
				this._ServiceTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceTable(ServiceTable entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_ServiceTable(ServiceTable entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer
	{
		
		private string _PhoneNumber;
		
		public Customer()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dates")]
	public partial class Dates : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Date;
		
		private System.TimeSpan _HourFrom;
		
		private System.TimeSpan _HourTo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnHourFromChanging(System.TimeSpan value);
    partial void OnHourFromChanged();
    partial void OnHourToChanging(System.TimeSpan value);
    partial void OnHourToChanged();
    #endregion
		
		public Dates()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourFrom", DbType="Time NOT NULL")]
		public System.TimeSpan HourFrom
		{
			get
			{
				return this._HourFrom;
			}
			set
			{
				if ((this._HourFrom != value))
				{
					this.OnHourFromChanging(value);
					this.SendPropertyChanging();
					this._HourFrom = value;
					this.SendPropertyChanged("HourFrom");
					this.OnHourFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourTo", DbType="Time NOT NULL")]
		public System.TimeSpan HourTo
		{
			get
			{
				return this._HourTo;
			}
			set
			{
				if ((this._HourTo != value))
				{
					this.OnHourToChanging(value);
					this.SendPropertyChanging();
					this._HourTo = value;
					this.SendPropertyChanged("HourTo");
					this.OnHourToChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee
	{
		
		private string _PhoneNumber;
		
		public Employee()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Gender1;
		
		private EntitySet<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGender1Changing(string value);
    partial void OnGender1Changed();
    #endregion
		
		public Gender()
		{
			this._UserTable = new EntitySet<UserTable>(new Action<UserTable>(this.attach_UserTable), new Action<UserTable>(this.detach_UserTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Gender", Storage="_Gender1", DbType="VarChar(10)")]
		public string Gender1
		{
			get
			{
				return this._Gender1;
			}
			set
			{
				if ((this._Gender1 != value))
				{
					this.OnGender1Changing(value);
					this.SendPropertyChanging();
					this._Gender1 = value;
					this.SendPropertyChanged("Gender1");
					this.OnGender1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_UserTable", Storage="_UserTable", ThisKey="ID", OtherKey="Gender_ID")]
		public EntitySet<UserTable> UserTable
		{
			get
			{
				return this._UserTable;
			}
			set
			{
				this._UserTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTable(UserTable entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_UserTable(UserTable entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logging")]
	public partial class Logging : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Logging()
		{
			this._UserTable = new EntitySet<UserTable>(new Action<UserTable>(this.attach_UserTable), new Action<UserTable>(this.detach_UserTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Logging_UserTable", Storage="_UserTable", ThisKey="ID", OtherKey="Logging_ID")]
		public EntitySet<UserTable> UserTable
		{
			get
			{
				return this._UserTable;
			}
			set
			{
				this._UserTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTable(UserTable entity)
		{
			this.SendPropertyChanging();
			entity.Logging = this;
		}
		
		private void detach_UserTable(UserTable entity)
		{
			this.SendPropertyChanging();
			entity.Logging = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Order_status;
		
		private EntitySet<OrderTable> _OrderTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrder_statusChanging(string value);
    partial void OnOrder_statusChanged();
    #endregion
		
		public OrderStatus()
		{
			this._OrderTable = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTable), new Action<OrderTable>(this.detach_OrderTable));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_status", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Order_status
		{
			get
			{
				return this._Order_status;
			}
			set
			{
				if ((this._Order_status != value))
				{
					this.OnOrder_statusChanging(value);
					this.SendPropertyChanging();
					this._Order_status = value;
					this.SendPropertyChanged("Order_status");
					this.OnOrder_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_OrderTable", Storage="_OrderTable", ThisKey="ID", OtherKey="OrderStatus_ID")]
		public EntitySet<OrderTable> OrderTable
		{
			get
			{
				return this._OrderTable;
			}
			set
			{
				this._OrderTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTable(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_OrderTable(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTable")]
	public partial class OrderTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Account_ID;
		
		private int _OrderStatus_ID;
		
		private int _Payment_ID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<Saleline> _Saleline;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<Payment> _Payment;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    partial void OnOrderStatus_IDChanging(int value);
    partial void OnOrderStatus_IDChanged();
    partial void OnPayment_IDChanging(int value);
    partial void OnPayment_IDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public OrderTable()
		{
			this._Saleline = new EntitySet<Saleline>(new Action<Saleline>(this.attach_Saleline), new Action<Saleline>(this.detach_Saleline));
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._Payment = default(EntityRef<Payment>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="Int NOT NULL")]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatus_ID", DbType="Int NOT NULL")]
		public int OrderStatus_ID
		{
			get
			{
				return this._OrderStatus_ID;
			}
			set
			{
				if ((this._OrderStatus_ID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatus_ID = value;
					this.SendPropertyChanged("OrderStatus_ID");
					this.OnOrderStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_ID", DbType="Int NOT NULL")]
		public int Payment_ID
		{
			get
			{
				return this._Payment_ID;
			}
			set
			{
				if ((this._Payment_ID != value))
				{
					if (this._Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayment_IDChanging(value);
					this.SendPropertyChanging();
					this._Payment_ID = value;
					this.SendPropertyChanged("Payment_ID");
					this.OnPayment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTable_Saleline", Storage="_Saleline", ThisKey="ID", OtherKey="Order_ID")]
		public EntitySet<Saleline> Saleline
		{
			get
			{
				return this._Saleline;
			}
			set
			{
				this._Saleline.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_OrderTable", Storage="_OrderStatus", ThisKey="OrderStatus_ID", OtherKey="ID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.OrderTable.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.OrderTable.Add(this);
						this._OrderStatus_ID = value.ID;
					}
					else
					{
						this._OrderStatus_ID = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_OrderTable", Storage="_Payment", ThisKey="Payment_ID", OtherKey="ID", IsForeignKey=true)]
		public Payment Payment
		{
			get
			{
				return this._Payment.Entity;
			}
			set
			{
				Payment previousValue = this._Payment.Entity;
				if (((previousValue != value) 
							|| (this._Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment.Entity = null;
						previousValue.OrderTable.Remove(this);
					}
					this._Payment.Entity = value;
					if ((value != null))
					{
						value.OrderTable.Add(this);
						this._Payment_ID = value.ID;
					}
					else
					{
						this._Payment_ID = default(int);
					}
					this.SendPropertyChanged("Payment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_OrderTable", Storage="_Account", ThisKey="Account_ID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.OrderTable.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.OrderTable.Add(this);
						this._Account_ID = value.ID;
					}
					else
					{
						this._Account_ID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Saleline(Saleline entity)
		{
			this.SendPropertyChanging();
			entity.OrderTable = this;
		}
		
		private void detach_Saleline(Saleline entity)
		{
			this.SendPropertyChanging();
			entity.OrderTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _TotalPrice;
		
		private System.Nullable<int> _PaymentType;
		
		private EntitySet<OrderTable> _OrderTable;
		
		private EntityRef<PaymentType> _PaymentType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTotalPriceChanging(decimal value);
    partial void OnTotalPriceChanged();
    partial void OnPaymentTypeChanging(System.Nullable<int> value);
    partial void OnPaymentTypeChanged();
    #endregion
		
		public Payment()
		{
			this._OrderTable = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTable), new Action<OrderTable>(this.detach_OrderTable));
			this._PaymentType1 = default(EntityRef<PaymentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money NOT NULL")]
		public decimal TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType", DbType="Int")]
		public System.Nullable<int> PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					if (this._PaymentType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_OrderTable", Storage="_OrderTable", ThisKey="ID", OtherKey="Payment_ID")]
		public EntitySet<OrderTable> OrderTable
		{
			get
			{
				return this._OrderTable;
			}
			set
			{
				this._OrderTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Payment", Storage="_PaymentType1", ThisKey="PaymentType", OtherKey="ID", IsForeignKey=true)]
		public PaymentType PaymentType1
		{
			get
			{
				return this._PaymentType1.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType1.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType1.Entity = null;
						previousValue.Payment.Remove(this);
					}
					this._PaymentType1.Entity = value;
					if ((value != null))
					{
						value.Payment.Add(this);
						this._PaymentType = value.ID;
					}
					else
					{
						this._PaymentType = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTable(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.Payment = this;
		}
		
		private void detach_OrderTable(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.Payment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentType")]
	public partial class PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PaymentType1;
		
		private EntitySet<Payment> _Payment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPaymentType1Changing(string value);
    partial void OnPaymentType1Changed();
    #endregion
		
		public PaymentType()
		{
			this._Payment = new EntitySet<Payment>(new Action<Payment>(this.attach_Payment), new Action<Payment>(this.detach_Payment));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PaymentType", Storage="_PaymentType1", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PaymentType1
		{
			get
			{
				return this._PaymentType1;
			}
			set
			{
				if ((this._PaymentType1 != value))
				{
					this.OnPaymentType1Changing(value);
					this.SendPropertyChanging();
					this._PaymentType1 = value;
					this.SendPropertyChanged("PaymentType1");
					this.OnPaymentType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentType_Payment", Storage="_Payment", ThisKey="ID", OtherKey="PaymentType")]
		public EntitySet<Payment> Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				this._Payment.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payment(Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType1 = this;
		}
		
		private void detach_Payment(Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rate")]
	public partial class Rate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RateValue;
		
		private EntitySet<Review> _Review;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRateValueChanging(int value);
    partial void OnRateValueChanged();
    #endregion
		
		public Rate()
		{
			this._Review = new EntitySet<Review>(new Action<Review>(this.attach_Review), new Action<Review>(this.detach_Review));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateValue", DbType="Int NOT NULL")]
		public int RateValue
		{
			get
			{
				return this._RateValue;
			}
			set
			{
				if ((this._RateValue != value))
				{
					this.OnRateValueChanging(value);
					this.SendPropertyChanging();
					this._RateValue = value;
					this.SendPropertyChanged("RateValue");
					this.OnRateValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rate_Review", Storage="_Review", ThisKey="RateValue", OtherKey="Rate_ID")]
		public EntitySet<Review> Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				this._Review.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Review(Review entity)
		{
			this.SendPropertyChanging();
			entity.Rate = this;
		}
		
		private void detach_Review(Review entity)
		{
			this.SendPropertyChanging();
			entity.Rate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Customer_ID;
		
		private string _Comment;
		
		private System.Nullable<int> _Rate_ID;
		
		private EntitySet<Advertisement> _Advertisement;
		
		private EntityRef<Rate> _Rate;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomer_IDChanging(string value);
    partial void OnCustomer_IDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnRate_IDChanging(System.Nullable<int> value);
    partial void OnRate_IDChanged();
    #endregion
		
		public Review()
		{
			this._Advertisement = new EntitySet<Advertisement>(new Action<Advertisement>(this.attach_Advertisement), new Action<Advertisement>(this.detach_Advertisement));
			this._Rate = default(EntityRef<Rate>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(255)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate_ID", DbType="Int")]
		public System.Nullable<int> Rate_ID
		{
			get
			{
				return this._Rate_ID;
			}
			set
			{
				if ((this._Rate_ID != value))
				{
					if (this._Rate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRate_IDChanging(value);
					this.SendPropertyChanging();
					this._Rate_ID = value;
					this.SendPropertyChanged("Rate_ID");
					this.OnRate_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_Advertisement", Storage="_Advertisement", ThisKey="ID", OtherKey="Review_ID")]
		public EntitySet<Advertisement> Advertisement
		{
			get
			{
				return this._Advertisement;
			}
			set
			{
				this._Advertisement.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rate_Review", Storage="_Rate", ThisKey="Rate_ID", OtherKey="RateValue", IsForeignKey=true)]
		public Rate Rate
		{
			get
			{
				return this._Rate.Entity;
			}
			set
			{
				Rate previousValue = this._Rate.Entity;
				if (((previousValue != value) 
							|| (this._Rate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rate.Entity = null;
						previousValue.Review.Remove(this);
					}
					this._Rate.Entity = value;
					if ((value != null))
					{
						value.Review.Add(this);
						this._Rate_ID = value.RateValue;
					}
					else
					{
						this._Rate_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_Review", Storage="_UserTable", ThisKey="Customer_ID", OtherKey="PhoneNumber", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.Review.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.Review.Add(this);
						this._Customer_ID = value.PhoneNumber;
					}
					else
					{
						this._Customer_ID = default(string);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Advertisement(Advertisement entity)
		{
			this.SendPropertyChanging();
			entity.Review = this;
		}
		
		private void detach_Advertisement(Advertisement entity)
		{
			this.SendPropertyChanging();
			entity.Review = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Saleline")]
	public partial class Saleline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Quantity;
		
		private int _Advertisement_ID;
		
		private int _Order_ID;
		
		private EntityRef<Advertisement> _Advertisement;
		
		private EntityRef<OrderTable> _OrderTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnAdvertisement_IDChanging(int value);
    partial void OnAdvertisement_IDChanged();
    partial void OnOrder_IDChanging(int value);
    partial void OnOrder_IDChanged();
    #endregion
		
		public Saleline()
		{
			this._Advertisement = default(EntityRef<Advertisement>);
			this._OrderTable = default(EntityRef<OrderTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Advertisement_ID", DbType="Int NOT NULL")]
		public int Advertisement_ID
		{
			get
			{
				return this._Advertisement_ID;
			}
			set
			{
				if ((this._Advertisement_ID != value))
				{
					if (this._Advertisement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdvertisement_IDChanging(value);
					this.SendPropertyChanging();
					this._Advertisement_ID = value;
					this.SendPropertyChanged("Advertisement_ID");
					this.OnAdvertisement_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_ID", DbType="Int NOT NULL")]
		public int Order_ID
		{
			get
			{
				return this._Order_ID;
			}
			set
			{
				if ((this._Order_ID != value))
				{
					if (this._OrderTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_IDChanging(value);
					this.SendPropertyChanging();
					this._Order_ID = value;
					this.SendPropertyChanged("Order_ID");
					this.OnOrder_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Advertisement_Saleline", Storage="_Advertisement", ThisKey="Advertisement_ID", OtherKey="ID", IsForeignKey=true)]
		public Advertisement Advertisement
		{
			get
			{
				return this._Advertisement.Entity;
			}
			set
			{
				Advertisement previousValue = this._Advertisement.Entity;
				if (((previousValue != value) 
							|| (this._Advertisement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Advertisement.Entity = null;
						previousValue.Saleline.Remove(this);
					}
					this._Advertisement.Entity = value;
					if ((value != null))
					{
						value.Saleline.Add(this);
						this._Advertisement_ID = value.ID;
					}
					else
					{
						this._Advertisement_ID = default(int);
					}
					this.SendPropertyChanged("Advertisement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTable_Saleline", Storage="_OrderTable", ThisKey="Order_ID", OtherKey="ID", IsForeignKey=true)]
		public OrderTable OrderTable
		{
			get
			{
				return this._OrderTable.Entity;
			}
			set
			{
				OrderTable previousValue = this._OrderTable.Entity;
				if (((previousValue != value) 
							|| (this._OrderTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderTable.Entity = null;
						previousValue.Saleline.Remove(this);
					}
					this._OrderTable.Entity = value;
					if ((value != null))
					{
						value.Saleline.Add(this);
						this._Order_ID = value.ID;
					}
					else
					{
						this._Order_ID = default(int);
					}
					this.SendPropertyChanged("OrderTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceTable")]
	public partial class ServiceTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Category_ID;
		
		private EntitySet<Advertisement> _Advertisement;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategory_IDChanging(System.Nullable<int> value);
    partial void OnCategory_IDChanged();
    #endregion
		
		public ServiceTable()
		{
			this._Advertisement = new EntitySet<Advertisement>(new Action<Advertisement>(this.attach_Advertisement), new Action<Advertisement>(this.detach_Advertisement));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_ID", DbType="Int")]
		public System.Nullable<int> Category_ID
		{
			get
			{
				return this._Category_ID;
			}
			set
			{
				if ((this._Category_ID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._Category_ID = value;
					this.SendPropertyChanged("Category_ID");
					this.OnCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceTable_Advertisement", Storage="_Advertisement", ThisKey="ID", OtherKey="Service_ID")]
		public EntitySet<Advertisement> Advertisement
		{
			get
			{
				return this._Advertisement;
			}
			set
			{
				this._Advertisement.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ServiceTable", Storage="_Category", ThisKey="Category_ID", OtherKey="ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.ServiceTable.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.ServiceTable.Add(this);
						this._Category_ID = value.ID;
					}
					else
					{
						this._Category_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Advertisement(Advertisement entity)
		{
			this.SendPropertyChanging();
			entity.ServiceTable = this;
		}
		
		private void detach_Advertisement(Advertisement entity)
		{
			this.SendPropertyChanging();
			entity.ServiceTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
	public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PhoneNumber;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private int _Logging_ID;
		
		private string _AddressTableLine;
		
		private string _City;
		
		private int _Gender_ID;
		
		private EntitySet<Advertisement> _Advertisement;
		
		private EntitySet<Review> _Review;
		
		private EntitySet<Account> _Account;
		
		private EntityRef<AddressTable> _AddressTable;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<Logging> _Logging;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLogging_IDChanging(int value);
    partial void OnLogging_IDChanged();
    partial void OnAddressTableLineChanging(string value);
    partial void OnAddressTableLineChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnGender_IDChanging(int value);
    partial void OnGender_IDChanged();
    #endregion
		
		public UserTable()
		{
			this._Advertisement = new EntitySet<Advertisement>(new Action<Advertisement>(this.attach_Advertisement), new Action<Advertisement>(this.detach_Advertisement));
			this._Review = new EntitySet<Review>(new Action<Review>(this.attach_Review), new Action<Review>(this.detach_Review));
			this._Account = new EntitySet<Account>(new Action<Account>(this.attach_Account), new Action<Account>(this.detach_Account));
			this._AddressTable = default(EntityRef<AddressTable>);
			this._Gender = default(EntityRef<Gender>);
			this._Logging = default(EntityRef<Logging>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(30)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logging_ID", DbType="Int NOT NULL")]
		public int Logging_ID
		{
			get
			{
				return this._Logging_ID;
			}
			set
			{
				if ((this._Logging_ID != value))
				{
					if (this._Logging.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogging_IDChanging(value);
					this.SendPropertyChanging();
					this._Logging_ID = value;
					this.SendPropertyChanged("Logging_ID");
					this.OnLogging_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTableLine", DbType="VarChar(100)")]
		public string AddressTableLine
		{
			get
			{
				return this._AddressTableLine;
			}
			set
			{
				if ((this._AddressTableLine != value))
				{
					this.OnAddressTableLineChanging(value);
					this.SendPropertyChanging();
					this._AddressTableLine = value;
					this.SendPropertyChanged("AddressTableLine");
					this.OnAddressTableLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					if (this._AddressTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender_ID", DbType="Int NOT NULL")]
		public int Gender_ID
		{
			get
			{
				return this._Gender_ID;
			}
			set
			{
				if ((this._Gender_ID != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGender_IDChanging(value);
					this.SendPropertyChanging();
					this._Gender_ID = value;
					this.SendPropertyChanged("Gender_ID");
					this.OnGender_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_Advertisement", Storage="_Advertisement", ThisKey="PhoneNumber", OtherKey="Employee_Phone")]
		public EntitySet<Advertisement> Advertisement
		{
			get
			{
				return this._Advertisement;
			}
			set
			{
				this._Advertisement.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_Review", Storage="_Review", ThisKey="PhoneNumber", OtherKey="Customer_ID")]
		public EntitySet<Review> Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				this._Review.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_Account", Storage="_Account", ThisKey="PhoneNumber", OtherKey="PhoneNumber")]
		public EntitySet<Account> Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				this._Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressTable_UserTable", Storage="_AddressTable", ThisKey="City", OtherKey="City", IsForeignKey=true)]
		public AddressTable AddressTable
		{
			get
			{
				return this._AddressTable.Entity;
			}
			set
			{
				AddressTable previousValue = this._AddressTable.Entity;
				if (((previousValue != value) 
							|| (this._AddressTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressTable.Entity = null;
						previousValue.UserTable.Remove(this);
					}
					this._AddressTable.Entity = value;
					if ((value != null))
					{
						value.UserTable.Add(this);
						this._City = value.City;
					}
					else
					{
						this._City = default(string);
					}
					this.SendPropertyChanged("AddressTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_UserTable", Storage="_Gender", ThisKey="Gender_ID", OtherKey="ID", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.UserTable.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.UserTable.Add(this);
						this._Gender_ID = value.ID;
					}
					else
					{
						this._Gender_ID = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Logging_UserTable", Storage="_Logging", ThisKey="Logging_ID", OtherKey="ID", IsForeignKey=true)]
		public Logging Logging
		{
			get
			{
				return this._Logging.Entity;
			}
			set
			{
				Logging previousValue = this._Logging.Entity;
				if (((previousValue != value) 
							|| (this._Logging.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Logging.Entity = null;
						previousValue.UserTable.Remove(this);
					}
					this._Logging.Entity = value;
					if ((value != null))
					{
						value.UserTable.Add(this);
						this._Logging_ID = value.ID;
					}
					else
					{
						this._Logging_ID = default(int);
					}
					this.SendPropertyChanged("Logging");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Advertisement(Advertisement entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_Advertisement(Advertisement entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
		
		private void attach_Review(Review entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_Review(Review entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
		
		private void attach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PhoneNumber;
		
		private System.Nullable<int> _AccountState_ID;
		
		private string _LatestActivity;
		
		private EntitySet<OrderTable> _OrderTable;
		
		private EntityRef<AccountState> _AccountState;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAccountState_IDChanging(System.Nullable<int> value);
    partial void OnAccountState_IDChanged();
    partial void OnLatestActivityChanging(string value);
    partial void OnLatestActivityChanged();
    #endregion
		
		public Account()
		{
			this._OrderTable = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTable), new Action<OrderTable>(this.detach_OrderTable));
			this._AccountState = default(EntityRef<AccountState>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountState_ID", DbType="Int")]
		public System.Nullable<int> AccountState_ID
		{
			get
			{
				return this._AccountState_ID;
			}
			set
			{
				if ((this._AccountState_ID != value))
				{
					if (this._AccountState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountState_IDChanging(value);
					this.SendPropertyChanging();
					this._AccountState_ID = value;
					this.SendPropertyChanged("AccountState_ID");
					this.OnAccountState_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatestActivity", DbType="VarChar(100)")]
		public string LatestActivity
		{
			get
			{
				return this._LatestActivity;
			}
			set
			{
				if ((this._LatestActivity != value))
				{
					this.OnLatestActivityChanging(value);
					this.SendPropertyChanging();
					this._LatestActivity = value;
					this.SendPropertyChanged("LatestActivity");
					this.OnLatestActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_OrderTable", Storage="_OrderTable", ThisKey="ID", OtherKey="Account_ID")]
		public EntitySet<OrderTable> OrderTable
		{
			get
			{
				return this._OrderTable;
			}
			set
			{
				this._OrderTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountState_Account", Storage="_AccountState", ThisKey="AccountState_ID", OtherKey="ID", IsForeignKey=true)]
		public AccountState AccountState
		{
			get
			{
				return this._AccountState.Entity;
			}
			set
			{
				AccountState previousValue = this._AccountState.Entity;
				if (((previousValue != value) 
							|| (this._AccountState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountState.Entity = null;
						previousValue.Account.Remove(this);
					}
					this._AccountState.Entity = value;
					if ((value != null))
					{
						value.Account.Add(this);
						this._AccountState_ID = value.ID;
					}
					else
					{
						this._AccountState_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccountState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_Account", Storage="_UserTable", ThisKey="PhoneNumber", OtherKey="PhoneNumber", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.Account.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.Account.Add(this);
						this._PhoneNumber = value.PhoneNumber;
					}
					else
					{
						this._PhoneNumber = default(string);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTable(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_OrderTable(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
}
#pragma warning restore 1591
