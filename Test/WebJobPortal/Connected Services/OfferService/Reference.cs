//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebJobPortal.OfferService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OfferService.IOfferService")]
    public interface IOfferService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/CreateServiceOffer", ReplyAction="http://tempuri.org/IOfferService/CreateServiceOfferResponse")]
        ServiceLibrary.Models.Offer CreateServiceOffer(ServiceLibrary.Models.Offer serviceOffer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/CreateServiceOffer", ReplyAction="http://tempuri.org/IOfferService/CreateServiceOfferResponse")]
        System.Threading.Tasks.Task<ServiceLibrary.Models.Offer> CreateServiceOfferAsync(ServiceLibrary.Models.Offer serviceOffer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/FindServiceOffer", ReplyAction="http://tempuri.org/IOfferService/FindServiceOfferResponse")]
        ServiceLibrary.Models.Offer FindServiceOffer(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/FindServiceOffer", ReplyAction="http://tempuri.org/IOfferService/FindServiceOfferResponse")]
        System.Threading.Tasks.Task<ServiceLibrary.Models.Offer> FindServiceOfferAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/DeleteServiceOffer", ReplyAction="http://tempuri.org/IOfferService/DeleteServiceOfferResponse")]
        bool DeleteServiceOffer(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/DeleteServiceOffer", ReplyAction="http://tempuri.org/IOfferService/DeleteServiceOfferResponse")]
        System.Threading.Tasks.Task<bool> DeleteServiceOfferAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/UpdateServiceOffer", ReplyAction="http://tempuri.org/IOfferService/UpdateServiceOfferResponse")]
        bool UpdateServiceOffer(ServiceLibrary.Models.Offer serviceOffer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/UpdateServiceOffer", ReplyAction="http://tempuri.org/IOfferService/UpdateServiceOfferResponse")]
        System.Threading.Tasks.Task<bool> UpdateServiceOfferAsync(ServiceLibrary.Models.Offer serviceOffer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/GetAllOffers", ReplyAction="http://tempuri.org/IOfferService/GetAllOffersResponse")]
        ServiceLibrary.Models.Offer[] GetAllOffers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOfferService/GetAllOffers", ReplyAction="http://tempuri.org/IOfferService/GetAllOffersResponse")]
        System.Threading.Tasks.Task<ServiceLibrary.Models.Offer[]> GetAllOffersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOfferServiceChannel : WebJobPortal.OfferService.IOfferService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OfferServiceClient : System.ServiceModel.ClientBase<WebJobPortal.OfferService.IOfferService>, WebJobPortal.OfferService.IOfferService {
        
        public OfferServiceClient() {
        }
        
        public OfferServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OfferServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OfferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OfferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceLibrary.Models.Offer CreateServiceOffer(ServiceLibrary.Models.Offer serviceOffer) {
            return base.Channel.CreateServiceOffer(serviceOffer);
        }
        
        public System.Threading.Tasks.Task<ServiceLibrary.Models.Offer> CreateServiceOfferAsync(ServiceLibrary.Models.Offer serviceOffer) {
            return base.Channel.CreateServiceOfferAsync(serviceOffer);
        }
        
        public ServiceLibrary.Models.Offer FindServiceOffer(int ID) {
            return base.Channel.FindServiceOffer(ID);
        }
        
        public System.Threading.Tasks.Task<ServiceLibrary.Models.Offer> FindServiceOfferAsync(int ID) {
            return base.Channel.FindServiceOfferAsync(ID);
        }
        
        public bool DeleteServiceOffer(int ID) {
            return base.Channel.DeleteServiceOffer(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServiceOfferAsync(int ID) {
            return base.Channel.DeleteServiceOfferAsync(ID);
        }
        
        public bool UpdateServiceOffer(ServiceLibrary.Models.Offer serviceOffer) {
            return base.Channel.UpdateServiceOffer(serviceOffer);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateServiceOfferAsync(ServiceLibrary.Models.Offer serviceOffer) {
            return base.Channel.UpdateServiceOfferAsync(serviceOffer);
        }
        
        public ServiceLibrary.Models.Offer[] GetAllOffers() {
            return base.Channel.GetAllOffers();
        }
        
        public System.Threading.Tasks.Task<ServiceLibrary.Models.Offer[]> GetAllOffersAsync() {
            return base.Channel.GetAllOffersAsync();
        }
    }
}
