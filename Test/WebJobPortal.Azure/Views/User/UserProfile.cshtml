@model UserProfileViewModel
@using WebJobPortal.Models
@using JobPortal.Model
@using Microsoft.AspNet.Identity;


@{
    ViewBag.Title = "UserProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .col-container {
        display: table; /* Make the container element behave like a table */
        width: 100%; /* Set full-width to expand the whole page */
    }

    .col {
        padding: 10px;
        display: table-cell;
        width: 30%; /* Set full-width to expand the whole page */
    }
</style>

<!--meant only for user's view-->


<div class="row">
    <div class="col-md-4" style="padding-top:10px">
        @{

            if (Model.Gender.Equals(Gender.Female))
            {
                <img src="~/Pictures/female.png" alt="User photo" />
            }
            else
            {
                <img src="~/Pictures/male.png" alt="User photo" />
            }
        }
    </div>
    <!--description from DB-->
    <div class="col-md-4" style="padding-top:10px">
        <h3>
            @Html.DisplayFor(model => model.FirstName)
            @Html.DisplayFor(model => model.LastName)
        </h3>
        <p style="word-break:break-all">
            @Html.DisplayFor(model => model.Description)
        </p>

    </div>
</div>
@if (Model.UserName == User.Identity.GetUserName())
{
    <!--menu: Personal info, settings, sell and buy-->
    <!--Side menu-->
    <div class="column">
        <!--different tabs in menu-->
        <div class="tabColumn">
            <!--Personal info set like default frame-->
            <button class="frameLinks" onclick="openFrame(event, 'Calendar')" id="defaultOpen">My calendar</button>
            <button class="frameLinks" onclick="openFrame(event, 'Offers')">Offers</button>
            <button class="frameLinks" onclick="openFrame(event, 'Bought')">Bought</button>
            <button class="frameLinks" onclick="openFrame(event, 'Personal Information')">Personal Information</button>
            <!--Settings button, when clickes, reveals other options-->
            <button class="dropdown-btn">Settings<i class="fa fa-caret-down"></i></button>
            <div class="dropdown-container">
                <!--Button privacy settings, reveals frame with other options/buttons. Code lower with other frames-->
                <button class="framelinks" onclick="openFrame(event, 'Change Email')">Change Email</button>
                <button class="framelinks" onclick="openFrame(event, 'Change Password')">Change Password</button>
                <button class="framelinks" onclick="openFrame(event, 'Description')">Description</button>
                <!--Second options is delete account btn, it directly shows popup window where user can delete it's account-->
                <!-- Trigger/Open The Modal/popup window -->
                <button id="delete-account-btn">Delete Account</button>
                <!-- The Modal -->
                <div id="delete-account-modal" class="deleteAccountModal">
                    <!-- Modal content -->
                    <div class="modalContent">
                        <!--X button for closing-->
                        <span class="close">&times;</span>
                        <header id="modal-header">
                            <h2>Delete Account</h2>
                        </header>
                        <div class="modalText">
                            <p id="question">Are you sure you want to delete your account?</p>
                            <p id="note">*NOTE: This cannot be undone.</p>
                        </div>

                        @Html.AntiForgeryToken()
                        @Html.ActionLink("Delete", "DeleteAsync", "User", new { id = Model.ID }, htmlAttributes: new { @class = "buttons", @id = "confirmBtn", @role = "button" })
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="column">
        <!--different tabs in menu-->
        <div class="tabColumn">
            <!--Personal info set like default frame-->
            <button class="frameLinks" onclick="openFrame(event, 'Calendar')" id="defaultOpen">My calendar</button>
            <button class="frameLinks" onclick="openFrame(event, 'Sell')">Sell</button>
        </div>
    </div>
}
<!--Read usenhr-->
<div id="Personal Information" class="frameContentColumn">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ID)
    <div class="form-group">
        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <!--Date of birth here-->
    <div class="form-group">
        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AddressLine, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.EditorFor(model => model.AddressLine, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Postcode, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.EditorFor(model => model.Postcode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CityName, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.EditorFor(model => model.CityName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.EditorFor(model => model.Region, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
    </div>

    <!--button to open hidden Edit page-->
    @Html.ActionLink("Edit information", "Edit", "User", new { id = Model.ID }, htmlAttributes: new { @class = "buttons", @id = "confirmBtn", @role = "button" })
</div>

<!--Frames for Column menu-->
<!--Buy page with table-->
<div id="Bought" class="frameContentColumn">
    <table class="serviceOfferTable">
        <colgroup>
            <col class="col-md-4">
            <col class="col-md-4">
            <col class="col-md-4">
        </colgroup>
        @Html.Partial("Bought", Model.Bought)
    </table>
</div>

<div id="Calendar" class="frameContentColumn">
    <table class="table table-sm">
        <colgroup>
            <col class="col-md-4">
            <col class="col-md-4">
            <col class="col-md-4">
        </colgroup>
        <thead>
            <tr>
                <th scope="col">
                    @Html.ActionLink(
                    "<<",
                    "UserProfile",
                    "User",
                    new {id= User.Identity.GetUserId(), date = Model.Date.AddDays(-1) },
                    new { @class = " btn btn-default btn-sm pull-left" })
                </th>
                <th scope="col">@Model.Date.ToString(@"D")</th>
                <th scope="col">
                    @Html.ActionLink(
                    ">>",
                    "UserProfile",
                    "User",
                    new {id= User.Identity.GetUserId(), date = Model.Date.AddDays(1) },
                    new { @class = " btn btn-default btn-sm pull-right" })
                </th>
            </tr>
        </thead>
        @if (Model.Jobs.Count() == 0)
        {
            <tr>
                <td colspan="3">
                    <div class="alert alert-info" role="alert">
                        You don't have any jobs for this day.
                    </div>
                </td>
            </tr>
        }
        @Html.Partial("Jobs", Model.Jobs)
    </table>
</div>
<!--user's own offers-->
<div id="Offers" class="frameContentColumn">
    <table class="serviceOfferTable">
        <colgroup>
            <col class="col-md-4">
            <col class="col-md-4">
            <col class="col-md-4">
        </colgroup>
        @Html.Partial("Offers", Model.Services)
    </table>
    <a href="@Url.Action("Add", "ServiceOffer")">
        <img style="width:90px ;padding-top:10px;" src="@Url.Content("~/Pictures/addBtn.png")" />
    </a>
</div>

<!--delete account option, code in the beginning - button delete account-->

<div id='DeleteAccount' class="frameContentColumn">

</div>

<div id='Change Email' class="frameContentColumn">
    @Html.ActionLink("Change email", "ChangeEmail", "User", new { id = Model.ID }, htmlAttributes: new { @class = "buttons", @role = "button" })
</div>

<div id='Change Password' class="frameContentColumn">
    @Html.ActionLink("Change password", "ChangePassword", "Manage", null, htmlAttributes: new { @class = "buttons", @role = "button" })
</div>

<div id='Description' class="frameContentColumn">
    @Html.ActionLink("Add description", "AddDescription", "User", new { id = Model.ID }, htmlAttributes: new { @class = "buttons", @role = "button" })
</div>

<script>
    /*function for opening frames (Personal info, sell,...)*/
    function openFrame(evt, frameName) {
        var i, frameContentColumn, tablinks;
        frameContentColumn = document.getElementsByClassName("frameContentColumn");
        for (i = 0; i < frameContentColumn.length; i++) {
            frameContentColumn[i].style.display = "none";
        }
        frameLinks = document.getElementsByClassName("frameLinks");
        for (i = 0; i < frameLinks.length; i++) {
            frameLinks[i].className = frameLinks[i].className.replace(" active", "");
        }
        document.getElementById(frameName).style.display = "block";
        evt.currentTarget.className += " active";
    }
    // Get the element with id="defaultOpen" and click on it
    document.getElementById("defaultOpen").click();

    /* Loop through all dropdown buttons to toggle between hiding and showing its dropdown content -
     * This allows the user to have multiple dropdowns without any conflict */
    var dropdown = document.getElementsByClassName("dropdown-btn");
    var i;
    for (i = 0; i < dropdown.length; i++) {
        dropdown[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var dropdownContent = this.nextElementSibling;
            if (dropdownContent.style.display === "block") {
                dropdownContent.style.display = "none";
            } else {
                dropdownContent.style.display = "block";
            }
        });
    }

    /* modals - popup windows*/
    // Get the modalS
    var deleteAccountModal = document.getElementById('delete-account-modal');

    // Get the button that opens the modal
    var openDeleteAccountBtn = document.getElementById("delete-account-btn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks the button, open the modal
    openDeleteAccountBtn.onclick = function () {
        deleteAccountModal.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        deleteAccountModal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == deleteAccountModal) {
            deleteAccountModal.style.display = "none";
        }
    }

</script>

